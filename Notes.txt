Basics of Database: 
1. What is database? 
    It is an organised collection of data that is stored and accessed electronically like a digital filing system. We can able to accessed and managed and update the database easily whenever we want to. 
    Key Features of SQL Database: 
    Structured storage, like a rows and column format which is not in real how it stores but it seems when it retrieve the data to us in the table form. 
    Consistency: the same type of data stored in the same way across the database. 
    Integrity: It ensures the data is accurate and reliable.
    Scalability: It can grow in size, handling more data without performance issues. 

2.DBMS- Database mnabagement system? 
    is a software that allows the users to create,manage, and interact with the database. It act as a intermediatery to the user and database, enable that the data is secure and consistent. 

3. What is Relational database management system? 
    There are lot of different types of DBMS exist. RDBMS is a database system management system that stores the data in a structured format, using the rows and columns which are organised into the tables. The key feature of this system is that it uses the relationship or links between the tables to manage and query the data efficiently.
    Features: 
      1. Tables: Data is stored in tables, where each table consist of rows (records) and columns (attributes)
      2. Primary Kay: Each table typically has a primary key,unique identifier.
      3. Foreign Key: Relationship are established using the foreign keys, which are fields in one table that refers to the primary key in the other table. RDBMS system using the SQL to manage and querying the data.
      4. Normalization: RDBMS often involves the normalization process, which organizes data to minimize redundancy and dependancy. Populat RDBMS: MySQL, PostgreSQL, Microsoft SQL and Oracle Database. 
4. What is SQL? 
    SQL is structured query language is a standardized programming language used to manage and manipulate relational databases. It is the primary language used to querying, inserting, updating and deleting, as well as for creatingand modifying the database structure itself. 
  Key components of SQL: 
    1. DQL: Data Query Language: used to query the data from the dataabase.DDL commands are select.
    2. DML: Data Manipulation Lang: used to insert,update,delete the data. DDL commands are insert, drop, delete update 
    3. DDL: Data Definition Lnag: used to define or alter the structure of the database such as creation, altering, or dropping tables. 
    4. DCL: Data Control Lang: used to control the access to the data like granting or revoke the permission.
    5. Transaction Control Lang: used to manage the transaction in the database, ensuring the data integrity. 
        commit -> refers to save all the chnages in the current transaction.
        rollback -> undo all the changes made in the current transaction. 

Downloading the Microsoft sql server developer free edition for non production environment -> download exe-> accept and install -> done -> install SSMS(sql server management studio) -> install -> done 
WINDOWS -> SSMS -> click and open. 
select server type: Database Engine 
server name : nitro_natarajan
authentication: window authentication 
encryption: optional 
click connect. 

new query -> write sql 
select 5 + 5; 
Note: 
Database server internal architecture contains many databases, each database contains many tables, each table contavins many records with mant attributes.

- create the database using create database <db_name>
- drop the database using drop database <name> 
- use the created database using use <db_name>
- show databases to see the available databases.
- select database() -> it tells us in which database we are currently worrking on 
- Table:
    - creation/define the table structure where we specify the columns and its types and each columns feaetures 
    - show tables to verify the created tables 
    - show columns from table -> table structure or we can do desc -> desc <table_name>
    - drop table <table_name> -> drop the table exist in the current using database 
    - delete table <table_name> -> delete the data in the table but not the structure 
    - insert into <table_name> columns (col1 , col2 , col3 ) values (),(),(); -> this way we insert the multiple records ina single go. 
    - Datatypes -> int, varchar(30), decimal(5,2), DATAE,TIME.TIMESTAMP, CHAR,BINARY, etc., 
    - not null -> which is the option we can mention with each column definition for make sure it has to be present otherwise the error comes. 
    - Alaways use single quotes in sql, colon for separate the sql statement. 
    - default 'default_value' in a column definition in the table make sure that the value to be added if the value is not passed while inserting the data. 
    - Primary Key -> which is specified to the column that act as unique to identify each entries or row of the table. We can add the primary key term in the column definition or primary key(column_name) in the end of the columns list in the table definition.Each table may have only one primary key column not more than one. But it may have more than one foreign key column. Primary key setting will include the power of setting the NOT NULL. 
    - auto_increment -> which is used along with the primary key so that it get autoatically incremented without explicitly telling to step up one while inserting the entries.

- CRUD Exercise
    - create a database, use the database and create a table with the definition and insert the entries into the table and retrieve the data by select statement. 
    - select * from cats -> it displays all the columns with all the rows of data from the cats table.
    - select name from cats -> it extract the name column from cats table. 
    - select name, age from cats -> it extract the name and age column from the cats.
    - Delete from cats -> it delete all the entries.
    - Delete from cats where name = "Nitro" -> it delete all the cats which has named Nitro. 
    - Update <tb_name> set name = "Nitro", age=12, breed = "Labrador" where name = "Natarajan" -> it means update or set the name to something in the table where name was "Natarajan". we can set multiple values in one go. 
    - WHERE Clause -> which is used to filter the entries based on the single/multiple condition.
    - ORDER BY col1 asc, col2 dec -> we can sort the table in an ascending/descending order of one or more column specification.  
Note: Always be careful while update the data in the database, just precheck whether we are selecting the right rows before update the data in the given table. 


- String Function generally we use in the select statement 
    - concat() -> concat(firstname, ' ' , lastname) 
    - concat_ws('-',x,y,z) -> x-y-z 
    - substring("string", start index, end index or from start index) or substr()
    - combining the multiple string function concat(substr(),'!!!')
    - replace(string, what needs to replace, what need to be replaced by)
    - reverse(string)
    - char_length(string)
    - upper(string) & lower(string)
    - insert(string, start_index to insert, how many char to replace, what is the charater to replace with)
    - left(string, how many char from left to be retrieved)
    - right(string, how many char from right to be retrieved)
    - repeat(string, times count)
    - trim(string) -> remove the leading and trailing space 

- Refining Selection 
    - Distinct keyword -> retrieve the unique results from duplicates 
    - order by -> to sort the result by name, age, salary, quntity, id in ascending or descending order. 
    - order by <col1>, <col2> -> it should come after the from clause. order by 2 means order the result by the second column. 
    - limit <number> -> we can control the no of records we can get back from the select statement. 
    - like '%nitro%' -> any specified column has any match with the specified pattern.
    - GROUP By <col1> , <col2> -> grouping the table based on the values of different columns so that we can calculate the aggregate result of numerical column based on grouped categories separately.
    - 'HAVING' -> If in case we wanna filter the records from the output of using groupy by, there we can use the having clause after the group by statement. To filter the grouped query result, we can use the having statement.  
    - 'WHERE' vs 'HAVING' -> both are used for filtering but on different levels of data. 'where' is used to row's filtering the raw table row,non-aggregated or non-grouped data  whereas 'having' used in the grouped data for filtering the agrregated grouped data. 
    - WITH ROLLUP -> is also used along with the group by clause -> select title, count(rating) from full_reviews group by title with rollup -> gives the aggregate value in the last row.
    - Rollup works on group by with any level and it is super aggregator 

- Aggregate function 
    - count() , avg() , sum(), min(), max()

- Datatypes:
    - varchar(max number of char limit), int are most widely used datatype in the database table data entries. 
    - But to store decimal,currency,volume, date,time we have different datatypes in our hand to use in the sql database.
    - char(10) ->we use this to store fixed character length datatype
    - varchar() ->we use this to store variable values in string form
    - for whole number storing, we can use the tinyint,smallint,mediumint,int,bigint -> each support the different range of values that we can able to store 
    - In general, we only work with signed integer, rearely we use unsigned. To make the int unsigned, we can add constraint in the table definition like tinyint unsigned.
    - To store the decimal values, we can use decimal, float, double datatype also. 
    - Decimal-> to store the more decimal values. In int datatype, if we store the decimal values, it take the integer part and skip the decimal values after the dot.
    - But in decimal datatype we can store precise decimal values as well. In datatype defining, we can meantion that decimal(10,2)-> in total ten digits, two decimal places are allowed. 
    - Float takes upto 4 bytes so its precise upto 7 digits and the double takes upto 8 bytes so it precise upto 15 bytes. 
    - Date and time store we can use date,time,datetime,timestamp. date -> [yyyy-mm-dd] , time -> [hh:mm:ss] dataetime -> [yyyy-mm-dd][hh-mm-ss] in this way it has to be mentioned while store.
    - while inserting the values into table, for the data,time,datetime colun,we can feed the structure values in singe quotes. 
    - we can use the datetime function to get the current data and time like curdate(),curtime(),now() -> return the current instance date or time -> 
    - Date function, Time function, Datetime function, Date math,timemath,datetime math functions. Refer the sql Manual to learn the available function to work on those information.

Operators: 
    - = ->equal to operator used in the where class, set the vaues in the update statment 
    - != -> not equal to means to check the not equality check 
    - Like '%nitro%' -> pattern matching 
    - NOT LIKE '%LIKE%' -> to found the non pattern matching 
    - > or >= or < or <= -> mention the range condition in the where clause 
    - AND -> Logical AND -> to combine multiple condition in the where clause. It return true when all the conndtion are true, otherwise false. 
    - OR -> Logcal OR -> To combine the conditions and it return true when one condition meets
    - IN operator -> it is used when we have a list of values to be checked. Used in the where clause. 'NOT IN' -> also used when required.
    - BETWEEN -> this is used to mean the ranges of values in the condition in the where clause. not between also possible here.
    - IS NULL -> Used to check the null values existance 
    - IS NOT NULL -> used to check the not null existance

CASE statement in the select statement to be used to display new derived column using the existing column. 
select 
case 
    when <condition> then action1,
    when <condition2> action2,
    else <action>
end as <newer_col_name> from table_name. 

Constraints: 
In the table definition,we can use the constraints such as auto_increment, not null, primary key. Like the same way we can have many more such as unique.
    - UNIQUE -> allows the unique values like primary but not the primary key 
    - check(<condition> whish return true or false) -> check constarint we can add in the column definition in the table definition. like check(age>18), check(reverse(word)=word) 
    - Multi column constraint 
    
Alter Table: 
    - we can add/remove/rename,change datatype to the column, add/remove the cinstraints to the column. All the table altering commands exist in the alter statements. 
    - ALTER TABLE COMPANIES ADD COLUMN CITY VARCHAR(90) -> THIS ADD THE COLUMN IN THE TABLE ->See the hand-written notes 
    - ALTER TABLE COMPANIES DROP COLUN employee_count; -> once dropped,it cant be restores then.
    - Renaming column and Renaming table 
        - rename table companies to xyz -> here rename the table by using the rename statements.
        - ALTER TABLE COMPANIES RENAME TO SUPPLIERS -> This way also works the same.
        - alter table companies rename column <M/F> TO <GENDER> -> Thia way we can rename the column of the table. 
        - we can add constraint to the table and drop the constraint as well. 


Relationships and joins 
    - lets learn how the relationship are built between the tables and and the tables are related with each others. 
    - In the real world all the data we have seen are related in some way eg: photos, likes,comments, reviews, relationships, tags, followers etcs are related. 
    - Real world data are messy and interrelated eg: blogpost site has users, post, comments,tags, ads etc., 
    - Take an book selling company like amazon -> authors, versions, customers, orders, reviews, genres these many tables to manage this shop. 
    - In general, we used to check out the schema diagram how the tables are related with each other. 
    - Relationship could be fall into three different categories such as 1:1 , 1:many, many:many relationship. 
    - 1:1 means that the relationship between customer and customer_details, here each row in the customer is associated with one row of the customer_details table. 
    - 1:MANY relationship, eg:like a relationship between movie and reviews table, each movie can have a many reviews but each review points the single movie only. widely used relationship in the schema design. 
    - MANY:MANY relationship is like author and books table. each author many have written many books, in other way each books may be written by many authors together. 
    - we can build a relationship between the table using the foreign key constraint. Each table may have a primary key which can be used in the other table as a refrences. 
    - Foreign key (customer_id) references customers(id) -> it create the relationship between the orders table and customer table. Each table can have ne primary key, having manier foreign key. 
    - CROSS Join: Which is a dumb join meaningless join in fact, because it join all the possible combination of each table rows. 
    - Eg: Cross join select * from customers, orders; -> which join two tables and return the all the possible combinaytion which is not really useful in fact. 
    - Inner Join: It select all the records from A and B where the condition is met. Intersections or matching records of both tables. Its intuitive join among all the join. 
    - select * from customers inner join orders on customers.id = orders.customer_id -> it join the intersection/overlap rows. 
    - Left Join: this join select everything from A, along with the matching records from B. 
    - Right Join: this join select everything from B, along with the matching records from A. 
    - 'ON DELETE CASCADE' -> this constraint allow us to delete the customer even this customer is refrenced in some other table. But the deleted customer order details also dropped when we delete the customer from the customer table.

    - Many:Many Relationship:
        - Generally, we build this relationship using more foreign keys with the table. More obvious it is useful in various scenarious. 
        - Eg: if we have reviewer who review the series and series alone wth basic info, then we make new table called review table which has the foreign keys which references the reviewer and series.
        - We can build te relationship and query the data after joining different tables. While building this relationship we many add many foreign key constraint and on delete cascade in the table definition/schema. 
    - Views:
        - Views are some query we named and store. We don't have to write the query over and over. A view acts as a virtual table. When we call/invoke the stored named view, it produces the result. 
        - It seems like a table but its not. We use this views for analysis. View are treated as true table but it is not in real. The syntax for creating the view. 
        - create views <view_name> as <complicated query>
        - Eg:       create view full_review as 
                    select title, genre, released_year,rating, first_name, last_name from reviews 
                    inner join reviewers on reviewers.id = reviews.reviewer_id 
                    inner join series on series.id = reviews.series_id;
        - Now we can select * from full_review; -> it return the table, but we can't able to update/edit the table. Just we can use it for an analysis and extract insights from the data. 
        - we can't delete anything from/inserting into the view table, because it is not a true table just a virtual table. 
        - Ofcourse we can do some updates until the view underlying query matches some contraints like non join query, no group by etc.,
        - Replacing/Altering View: Just -> create or replace view ordered_series as select * from series order by title desc; This way we can able to replace the existing view with different underlying/update over the query.
        - To alter the existing view -> alter view <view_name> as select * from series order by released_year desc; 
        - To drop the view we can just simply -> drop view <view_name>
    - SQL Modes
        - select @@global.sql_mode -> shows the settings on the global window of sql 
        - select @@session.sql_mode -> shows the session sql settings. list of modes in quotes> eg: set global sql_mode 'ONLY_FIULL_GROUP_BY, STRICT_TRANS_TABLES,NO_ZER_IN_DATE' -> these setting will be in active then from defaults. 
        - we can set the session settings by ->  set global sql_mode = <provide the list of modes in quotes>
    - Windows Functions -> which create the computation and return the result along with all the rows without boil down to single row as group by does. 
        - aggregate function with over()
        - over() -> create the empty window frame which contains all the rows of the table. 
        - over(partition by some_column) -> create the window frame with department wise 
        - over(partition by department order by total_amount) -> we can use the order by inside theover clause, so that we can get the roll_total amount for each department. 
        - rank with over(order by salary), dense_rank over(order by salary), roll_number over(order by salary) we can use to compute the rank and roll number.
        - ntile -> we can order the rows and we can find the salaries quartile range 
        - lead and lag -> we can use this to compare the salaries with next salary and previous salary when we ordered the salary in asc or desc and find the difference of the salary from the next or previous salaries easily.
        - We can use other window functions also. ROW BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING, ROW BETWEEN N PRECEEDING AND N FOLLOWING, CURRENT ROW AND N PRECEEDING, CURRENT ROW AND UNBOUNDED FOLLOWING, etc., 

    - Lets Create the Instagram DB SCHEMA: 
            
